import math
print ("192211491-Govardhan S")
# Alpha-Beta pruning function
def alpha_beta_pruning(node_index, depth, is_maximizing_player, values, alpha, beta):
    # Base case: if we're at the leaf node
    if depth == 0:
        return values[node_index]

    if is_maximizing_player:
        max_eval = -math.inf
        for i in range(2):  # Assuming binary tree (2 children per node)
            eval = alpha_beta_pruning(node_index * 2 + i, depth - 1, False, values, alpha, beta)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break  # Beta cut-off
        return max_eval
    else:
        min_eval = math.inf
        for i in range(2):
            eval = alpha_beta_pruning(node_index * 2 + i, depth - 1, True, values, alpha, beta)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break  # Alpha cut-off
        return min_eval

# Example usage:
if _name_ == "_main_":
    # Depth of the game tree
    DEPTH = 3
    # Leaf node values
    values = [3, 5, 6, 9, 1, 2, 0, -1]
    
    # Start the algorithm
    result = alpha_beta_pruning(0, DEPTH, True, values, -math.inf, math.inf)
    print("Optimal value:", result)
