import heapq
print ("192472077 - bhargava")
goal = '123456780'

def heuristic(state):
    return sum(abs((int(c)-1) // 3 - i) + abs((int(c)-1) % 3 - j)
               for i, row in enumerate(state) for j, c in enumerate(row) if c != '0')

def get_neighbors(state):
    i, j = next((i, j) for i in range(3) for j in range(3) if state[i][j] == '0')
    directions = [(-1,0), (1,0), (0,-1), (0,1)]
    neighbors = []
    for dx, dy in directions:
        x, y = i + dx, j + dy
        if 0 <= x < 3 and 0 <= y < 3:
            new_state = [list(row) for row in state]
            new_state[i][j], new_state[x][y] = new_state[x][y], new_state[i][j]
            neighbors.append(tuple(''.join(row) for row in new_state))
    return neighbors

def a_star(start):
    start_state = tuple(''.join(str(cell) for cell in row) for row in start)
    heap = [(heuristic(start_state), 0, start_state, [])]
    visited = set()
    
    while heap:
        _, cost, state, path = heapq.heappop(heap)
        if ''.join(state) == goal:
            return path
        if state in visited:
            continue
        visited.add(state)
        for neighbor in get_neighbors(state):
            heapq.heappush(heap, (cost + 1 + heuristic(neighbor), cost + 1, neighbor, path + [neighbor]))
    return None

start = [[1, 2, 3],
         [4, 0, 6],
         [7, 5, 8]]

solution = a_star(start)
if solution:
    print("Solution in {} moves:".format(len(solution)))
    for step in solution:
        for row in step:
            print(row)
        print()
else:
    print("No solution.")
